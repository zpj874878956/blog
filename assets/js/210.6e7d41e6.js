(window.webpackJsonp=window.webpackJsonp||[]).push([[210],{563:function(n,s,a){"use strict";a.r(s);var t=a(0),e=Object(t.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"init函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#init函数"}},[n._v("#")]),n._v(" init函数")]),n._v(" "),s("p",[n._v("go语言中"),s("code",[n._v("init")]),n._v("函数用于包"),s("code",[n._v("(package)")]),n._v("的初始化，该函数是go语言的一个重要特性。")]),n._v(" "),s("p",[n._v("有下面的特征：")]),n._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[n._v("    "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v(" init函数是用于程序执行前做包的初始化的函数，比如初始化包里的变量等\n\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("2")]),n._v(" 每个包可以拥有多个init函数\n\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("3")]),n._v(" 包的每个源文件也可以拥有多个init函数\n\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("4")]),n._v(" 同一个包中多个init函数的执行顺序"),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("go")]),n._v("语言没有明确的定义"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("说明"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("5")]),n._v(" 不同包的init函数按照包导入的依赖关系决定该初始化函数的执行顺序\n\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("6")]),n._v(" init函数不能被其他函数调用，而是在main函数执行之前，自动被调用\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("h2",{attrs:{id:"main函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#main函数"}},[n._v("#")]),n._v(" main函数")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("    Go语言程序的默认入口函数(主函数)：func main()\n    函数体用｛｝一对括号包裹。\n\n    func main(){\n        //函数体\n    }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("h2",{attrs:{id:"init函数和main函数的异同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#init函数和main函数的异同"}},[n._v("#")]),n._v(" init函数和main函数的异同")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("    相同点：\n        两个函数在定义时不能有任何的参数和返回值，且Go程序自动调用。\n    不同点：\n        init可以应用于任意包中，且可以重复定义多个。\n        main函数只能用于main包中，且只能定义一个。\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("两个函数的执行顺序：")]),n._v(" "),s("p",[n._v("对同一个go文件的"),s("code",[n._v("init()")]),n._v("调用顺序是从上到下的。")]),n._v(" "),s("p",[n._v("对同一个package中不同文件是按文件名字符串比较“从小到大”顺序调用各文件中的"),s("code",[n._v("init()")]),n._v("函数。")]),n._v(" "),s("p",[n._v("对于不同的"),s("code",[n._v("package")]),n._v('，如果不相互依赖的话，按照main包中"先'),s("code",[n._v("import")]),n._v('的后调用"的顺序调用其包中的'),s("code",[n._v("init()")]),n._v("，如果"),s("code",[n._v("package")]),n._v("存在依赖，则先调用最早被依赖的"),s("code",[n._v("package")]),n._v("中的"),s("code",[n._v("init()")]),n._v("，最后调用"),s("code",[n._v("main")]),n._v("函数。")]),n._v(" "),s("p",[n._v("如果"),s("code",[n._v("init")]),n._v("函数中使用了"),s("code",[n._v("println()")]),n._v("或者"),s("code",[n._v("print()")]),n._v("你会发现在执行过程中这两个不会按照你想象中的顺序执行。这两个函数官方只推荐在测试环境中使用，对于正式环境不要使用。")])])}),[],!1,null,null,null);s.default=e.exports}}]);