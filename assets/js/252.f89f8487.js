(window.webpackJsonp=window.webpackJsonp||[]).push([[252],{604:function(e,o,r){"use strict";r.r(o);var t=r(0),a=Object(t.a)({},(function(){var e=this,o=e._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h2",{attrs:{id:"_1-应用场景方面"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-应用场景方面"}},[e._v("#")]),e._v(" 1.应用场景方面")]),e._v(" "),o("p",[e._v("RabbitMQ：用于实时的，对可靠性要求较高的消息传递上。")]),e._v(" "),o("p",[e._v("kafka：用于处于活跃的流式数据，大数据量的数据处理上。")]),e._v(" "),o("h2",{attrs:{id:"_2-架构模型方面"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_2-架构模型方面"}},[e._v("#")]),e._v(" 2.架构模型方面")]),e._v(" "),o("p",[e._v("producer，broker，consumer")]),e._v(" "),o("p",[e._v("RabbitMQ：以broker为中心，有消息的确认机制")]),e._v(" "),o("p",[e._v("kafka：以consumer为中心，无消息的确认机制")]),e._v(" "),o("h2",{attrs:{id:"_3-吞吐量方面"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_3-吞吐量方面"}},[e._v("#")]),e._v(" 3.吞吐量方面")]),e._v(" "),o("p",[e._v("RabbitMQ：支持消息的可靠的传递，支持事务，不支持批量操作，基于存储的可靠性的要求存储可以采用内存或硬盘，吞吐量小。")]),e._v(" "),o("p",[e._v("kafka：内部采用消息的批量处理，数据的存储和获取是本地磁盘顺序批量操作，消息处理的效率高，吞吐量高。")]),e._v(" "),o("h2",{attrs:{id:"_4-集群负载均衡方面"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_4-集群负载均衡方面"}},[e._v("#")]),e._v(" 4.集群负载均衡方面")]),e._v(" "),o("p",[e._v("RabbitMQ：本身不支持负载均衡，需要loadbalancer的支持")]),e._v(" "),o("p",[e._v("kafka：采用zookeeper对集群中的broker，consumer进行管理，可以注册topic到zookeeper上，通过zookeeper的协调机制，producer保存对应的topic的broker信息，可以随机或者轮询发送到broker上，producer可以基于语义指定分片，消息发送到broker的某个分片上。")]),e._v(" "),o("p",[e._v("kafka单机版搭建")]),e._v(" "),o("p",[e._v("下载kafka_2.13-2.6.0.tgz安装包")]),e._v(" "),o("p",[e._v("tar -zxf kafka_2.13-2.6.0.tgz")]),e._v(" "),o("p",[e._v("mv kafka_2.13-2.6.0/ kafka")]),e._v(" "),o("p",[e._v("自带的Zookeeper程序脚本与配置文件名与原生Zookeeper稍有不同。kafka自带的Zookeeper程序在bin目录下的zookeeper-server-start.sh脚本进行启动，zookeeper-server-stop.sh脚本进行停止。另外Zookeeper的配制文件在路径config/zookeeper.properties，如果有需要可以修改其中的参数。")]),e._v(" "),o("p",[e._v("首先强调一点，kafka的日志目录和zookeeper数据目录，这两项默认放在tmp目录，而tmp目录中内容会随重启而丢失,所以我们遇到的时候最好自定义一个路径。\nzookeeper.properties 配置为")]),e._v(" "),o("p",[e._v("dataDir=/data/kafka/data/kfkzookeeper\nclientPort=2181\nadmin.enableServer=false\ntickTime=2000\ninitLimit=10\nsyncLimit=5\nserver.1=172.168.199.223:2888:3888")]),e._v(" "),o("p",[e._v("zookeeper配置myid文件\n三台服务器都要在其zookeeper数据目录dataDir下创建一个myid文件，文件内只需填入上述配置文件中broker id的值，作为集群识别标识。以其中一台192.168.11.21服务器为例：")]),e._v(" "),o("p",[e._v("[root@host-192-168-11-21 ~]# cd /data/kafka/data/kfkzookeeper\n[root@host-192-168-11-21 kfkzookeeper]# echo 1 > myid\n创建好后，查看一下，没问题，myid里面只有一个数值")]),e._v(" "),o("p",[e._v("kafka配置文件")]),e._v(" "),o("p",[e._v("进入kafka/config目录下，参考如下修改server.properties文件")]),e._v(" "),o("p",[e._v("broker.id=1\ndelete.topic.enable=true\nnum.network.threads=3\nnum.io.threads=8\nsocket.send.buffer.bytes=102400\nsocket.receive.buffer.bytes=102400\nsocket.request.max.bytes=104857600\nlog.dirs=/data/kafka/data/kafka\nnum.partitions=3\nnum.recovery.threads.per.data.dir=1\noffsets.topic.replication.factor=3\ntransaction.state.log.replication.factor=3\ntransaction.state.log.min.isr=3\nlog.retention.hours=168\nlog.segment.bytes=1073741824\nlog.retention.check.interval.ms=300000\nzookeeper.connect=172.168.199.223:2181\nzookeeper.connection.timeout.ms=60000\ngroup.initial.rebalance.delay.ms=0")]),e._v(" "),o("p",[e._v("启动zookeeper服务")]),e._v(" "),o("p",[e._v("bin/zookeeper-server-start.sh -daemon config/zookeeper.properties")]),e._v(" "),o("p",[e._v("启动kafka")]),e._v(" "),o("p",[e._v("bin/kafka-server-start.sh -daemon config/server.properties")]),e._v(" "),o("p",[e._v("查看java项目进程")]),e._v(" "),o("p",[e._v("jps")]),e._v(" "),o("h2",{attrs:{id:"_5-kafka常见操作"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_5-kafka常见操作"}},[e._v("#")]),e._v(" 5.kafka常见操作")]),e._v(" "),o("p",[o("strong",[e._v("启动Zookeeper")])]),e._v(" "),o("p",[e._v("bin/zookeeper-server-start.sh -daemon config/zookeeper.properties")]),e._v(" "),o("p",[o("strong",[e._v("关闭 Zookeeper")])]),e._v(" "),o("p",[e._v("bin/zookeeper-server-stop.sh -daemon config/zookeeper.properties")]),e._v(" "),o("p",[o("strong",[e._v("启动kafka")])]),e._v(" "),o("p",[e._v("bin/kafka-server-start.sh -daemon config/server.properties")]),e._v(" "),o("p",[o("strong",[e._v("关闭kafka")])]),e._v(" "),o("p",[e._v("bin/kafka-server-stop.sh config/server.properties")]),e._v(" "),o("p",[o("strong",[e._v("创建topic")])]),e._v(" "),o("p",[e._v("--partitions指定分区数 --replication-factor 指定分区数的副本")]),e._v(" "),o("p",[e._v("bin/kafka-topics.sh --create --zookeeper 192.168.11.21:2181 --replication-factor 3 --partitions 3 --topic test")]),e._v(" "),o("p",[e._v("./kafka-topics.sh --create --zookeeper 172.168.199.223:2181 --replication-factor 1 --partitions 1 --topic fgbp-log-pro")]),e._v(" "),o("p",[o("strong",[e._v("查看topic列表")])]),e._v(" "),o("p",[e._v("bin/kafka-topics.sh --list --zookeeper 192.168.11.21:2181")]),e._v(" "),o("p",[o("strong",[e._v("查看topic详情")])]),e._v(" "),o("p",[e._v("bin/kafka-topics.sh --zookeeper 192.168.11.21:2181 --describe --topic test")]),e._v(" "),o("p",[o("strong",[e._v("创建生产者，在一台服务器")])]),e._v(" "),o("p",[e._v("bin/kafka-console-producer.sh --broker-list 192.168.11.21:9092 --topic test")]),e._v(" "),o("p",[o("strong",[e._v("创建消费者，在另一台服务器")])]),e._v(" "),o("p",[e._v("bin/kafka-console-consumer.sh --bootstrap-server 192.168.11.22:9092 --topic test")]),e._v(" "),o("p",[o("strong",[e._v("删除topic")])]),e._v(" "),o("p",[e._v("bin/kafka-topics.sh --zookeeper 192.168.11.22:2181 --delete --topic test")]),e._v(" "),o("p",[o("strong",[e._v("查看kafka topic数据内容")])]),e._v(" "),o("p",[e._v("kafka-console-consumer.sh --bootstrap-server kafka-node-0:9093 kafka-node-1:9094 kafka-node-2:9095 --from-beginning --topic gaoyingfutures_bars_live")])])}),[],!1,null,null,null);o.default=a.exports}}]);