(window.webpackJsonp=window.webpackJsonp||[]).push([[225],{578:function(s,n,e){"use strict";e.r(n);var t=e(0),a=Object(t.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("dd 是 Linux/UNIX 下的一个非常有用的命令，作用是用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换。")]),s._v(" "),n("p",[s._v("dd 命令通用语法格式如下：")]),s._v(" "),n("p",[s._v("dd if=path/to/input_file of=/path/to/output_file bs=block_size count=number_of_blocks")]),s._v(" "),n("p",[n("strong",[s._v("命令简介")])]),s._v(" "),n("p",[s._v("主要选项（指定数字的地方若以下列字符结尾乘以相应的数字: b=512, c=1, k=1024, w=2, xm=number m）：")]),s._v(" "),n("div",{staticClass:"language-context line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-context"}},[n("code",[s._v("if=file 　　　　　　　　　　　　　　　　输入文件名，缺省为标准输入。 \nof=file 　　　　　　　　　　　　　　　　输出文件名，缺省为标准输出。 \nibs=bytes 　　　　　　　　　　　　　　　一次读入 bytes 个字节(即一个块大小为 bytes 个字节)。 \nobs=bytes 　　　　　　　　　　　　　　　一次写 bytes 个字节(即一个块大小为 bytes 个字节)。 \nbs=bytes 　　　　　　　　　　　　　　　 同时设置读写块的大小为 bytes ，可代替 ibs 和 obs 。 \ncbs=bytes 　　　　　　　　　　　　　　　一次转换 bytes 个字节，即转换缓冲区大小。 \nskip=blocks 　　　　　　　　　　　　　 从输入文件开头跳过 blocks 个块后再开始复制。 \nseek=blocks 　　　　　　　　　　 从输出文件开头跳过 blocks 个块后再开始复制。(通常只有当输出文件是磁盘或磁带时才有效)。 \ncount=blocks 　　　　　　　　　　　　　仅拷贝 blocks 个块，块大小等于 ibs 指定的字节数。 \nconv=conversion"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(",conversion..."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 用指定的参数转换文件。  \niflag=FLAGS　　　　　　　　　　　　　　指定读的方式FLAGS，参见“FLAGS参数说明”  \noflag=FLAGS　　　　　　　　　　　　　　指定写的方式FLAGS，参见“FLAGS参数说明”\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("conv 转换参数：")]),s._v(" "),n("div",{staticClass:"language-context line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-context"}},[n("code",[s._v("ascii 　　　　　　　　　　　　　　　　　转换 EBCDIC 为 ASCII。 \nebcdic 　　　　　　　　　　　　 　 转换 ASCII 为 EBCDIC。 \nibm 　　　　　　　　　　　　　　　　　　转换 ASCII 为 alternate EBCDIC. block 　　　　　　　　　　　　　　　　 把每一行转换为长度为 cbs 的记录，不足部分用空格填充。 \nunblock 　　　　　　　　　　　　　　　 使每一行的长度都为 cbs ，不足部分用空格填充。 \nlcase 　　　　　　　　　　　　　　　　 把大写字符转换为小写字符。 \nucase 　　　　　　　　　　　　　　　　 把小写字符转换为大写字符。 \nswab 　　　　　　　　　　　　　　　　 交换输入的每对字节。 \nnoerror 　　　　　　　　　　　　　　　 出错时不停止。 \nnotrunc 　　　　　　　　　　　　　　　 不截短输出文件。  \nsync 　　　　　　　　　　　　　　　　　 把每个输入块填充到ibs个字节，不足部分用空(NUL)字符补齐。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("FLAGS 参数说明：")]),s._v(" "),n("div",{staticClass:"language-context line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-context"}},[n("code",[s._v("append -append mode (makes sense only for output; conv=notrunc sug-gested)  \ndirect　　　　　　　　　　　　　　　 读写数据采用直接IO方式；\ndirectory　　　　　　　　　　　　　　读写失败除非是directory；\ndsync　　　　　　　　　　　　　　　　 读写数据采用同步IO；\nsync　　　　　　　　　　　　　　　　　同上，但是针对是元数据\nfullblock　　　　　　　　　　　　　　堆积满block（accumulate full blocks of input ）(iflag only)；\nnonblock　　　　　　　　　　　　　　 读写数据采用非阻塞IO方式\nnoatime　　　　　　　　　　　　　　　 读写数据不更新访问时间\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("div",{staticClass:"language-context line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-context"}},[n("code",[s._v("append -append mode (makes sense only for output; conv=notrunc sug-gested)  \ndirect　　　　　　　　　　　　　　　 读写数据采用直接IO方式；\ndirectory　　　　　　　　　　　　　　读写失败除非是directory；\ndsync　　　　　　　　　　　　　　　　 读写数据采用同步IO；\nsync　　　　　　　　　　　　　　　　　同上，但是针对是元数据\nfullblock　　　　　　　　　　　　　　堆积满block（accumulate full blocks of input ）(iflag only)；\nnonblock　　　　　　　　　　　　　　 读写数据采用非阻塞IO方式\nnoatime　　　　　　　　　　　　　　　 读写数据不更新访问时间\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[n("strong",[s._v("time+dd 测磁盘读写速度")])]),s._v(" "),n("p",[s._v("1、先熟悉两个特殊的设备及一些相关参数：")]),s._v(" "),n("ol",[n("li",[s._v("time有计时作用，dd用于复制，从if读出，写到of；")])]),s._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[s._v("if=/dev/zero（产生字符）不产生IO，因此可以用来测试纯写速度；")])]),s._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[n("p",[s._v("同理of=/dev/null（回收站、无底洞）不产生IO，可以用来测试纯读速度；")])]),s._v(" "),n("li",[n("p",[s._v("将/tmp/test拷贝到/var则同时测试了读写速度；")])]),s._v(" "),n("li",[n("p",[s._v("bs是每次读或写的大小，即一个块的大小，count是读写块的数量。")])])]),s._v(" "),n("p",[s._v("当写入到驱动盘的时候，我们简单的从无穷无用字节的源 /dev/zero 读取，当从驱动盘读取的时候，我们读取的是刚才的文件，并把输出结果发送到无用的 /dev/null。在整个操作过程中， DD 命令会跟踪数据传输的速度并且报告出结果。")]),s._v(" "),n("p",[s._v("2、测试磁盘写能力")]),s._v(" "),n("p",[n("strong",[s._v("time dd if=/dev/zero of=/testw.dbf bs=4k count=100000")])]),s._v(" "),n("p",[s._v("因为/dev//zero是一个伪设备，它只产生空字符流，对它不会产生IO，所以，IO都会集中在of文件中，of文件只用于写，所以这个命令相当于测试磁盘的写能力。命令结尾添加oflag=direct将跳过内存缓存，添加oflag=sync将跳过hdd缓存。"),n("br"),s._v("\n3、测试磁盘读能力")]),s._v(" "),n("p",[n("strong",[s._v("time dd if=/dev/sdb of=/dev/null bs=4k")])]),s._v(" "),n("p",[s._v("因为/dev/sdb是一个物理分区，对它的读取会产生IO，/dev/null是伪设备，相当于黑洞，of到该设备不会产生IO，所以，这个命令的IO只发生在/dev/sdb上，也相当于测试磁盘的读能力。（Ctrl+c终止测试）")]),s._v(" "),n("p",[s._v("4、测试同时读写能力")]),s._v(" "),n("p",[n("strong",[s._v("time dd if=/dev/sdb of=/testrw.dbf bs=4k")])]),s._v(" "),n("p",[s._v("在这个命令下，一个是物理分区，一个是实际的文件，对它们的读写都会产生IO（对/dev/sdb是读，对/testrw.dbf是写），假设它们都在一个磁盘中，这个命令就相当于测试磁盘的同时读写能力。")]),s._v(" "),n("p",[s._v("5、测试纯写入性能")]),s._v(" "),n("p",[n("strong",[s._v("dd if=/dev/zero of=test bs=8k count=10000 oflag=direct")])]),s._v(" "),n("p",[s._v("6、测试纯读取性能")]),s._v(" "),n("p",[n("strong",[s._v("dd if=test of=/dev/null bs=8k count=10000 iflag=direct")])]),s._v(" "),n("p",[s._v("注意：dd 只能提供一个大概的测试结果，而且是连续 I/O 而不是随机 I/O，理论上文件规模越大，测试结果越准确。 同时，iflag/oflag 提供 direct 模式，direct 模式是把写入请求直接封装成 I/O 指令发到磁盘，非 direct 模式只是把数据写入到系统缓存就认为 I/O 成功，并由操作系统决定缓存中的数据什么时候被写入磁盘。（参考链接：http://www.360doc.com/content/15/0906/17/8737500_497292503.shtml）")]),s._v(" "),n("p",[n("strong",[s._v("操作实例")])]),s._v(" "),n("p",[s._v("使用一块“三星 Evo 120G” 的固态硬盘，实验中，把硬盘接在 SATA 2.0 端口上。")]),s._v(" "),n("p",[s._v("1）写入速度")]),s._v(" "),n("p",[s._v("首先让我们写入固态硬盘")]),s._v(" "),n("div",{staticClass:"language-context line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-context"}},[n("code",[s._v("$ dd if=/dev/zero of=./largefile bs=1M count=1024\n\n1024+0 records in\n1024+0 records out\n1073741824 bytes (1.1 GB) copied,4.82364 s,223 MB/s\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("1M的大小实际上是相当大的。你可以尝试用更小的尺寸如 64K 甚至是 4K 的。")]),s._v(" "),n("p",[s._v("2）读取速度")]),s._v(" "),n("p",[s._v("现在读回这个文件。但是，得首先清除内存的缓存，以确保这个文件确实是从驱动盘读取的。")]),s._v(" "),n("p",[s._v("运行下面的命令来清除内存缓存")]),s._v(" "),n("div",{staticClass:"language-context line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-context"}},[n("code",[s._v('$ sudo sh -c "sync '),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("&")]),s._v(' echo 3 > /proc/sys/vm/drop_caches"\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("现在读取此文件")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("$ dd if=./largefile of=/dev/null bs=4k\n\n165118+0 records in\n165118+0 records out\n676323328 bytes (676 MB) copied,3.0114 s,225 MB/s\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);